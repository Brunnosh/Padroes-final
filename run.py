#!/usr/bin/env python3
"""
TaskFlow - Sistema de Gerenciamento de Tarefas
Script de inicializa√ß√£o simplificado
"""

import os
import sys

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio. Vers√£o atual:", sys.version.split()[0])
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} encontrado")
    return True

def check_virtual_env():
    """Verifica se est√° executando em um ambiente virtual"""
    # Verifica√ß√£o mais robusta para ambiente virtual
    in_venv = (
        hasattr(sys, 'real_prefix') or 
        (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix) or
        os.environ.get('VIRTUAL_ENV') is not None
    )
    
    if not in_venv:
        print("‚ö†Ô∏è  ATEN√á√ÉO: Recomendamos executar em um ambiente virtual")
        print("   Para criar: python3 -m venv venv")
        print("   Para ativar (Linux/Mac): source venv/bin/activate")
        print("   Para ativar (Windows): .\\venv\\Scripts\\activate")
        print()
        print("üí° Ou use os scripts autom√°ticos: ./setup.sh e ./start.sh")
        print()
        
        # Em modo n√£o-interativo, continuar automaticamente
        if os.getenv('FLASK_ENV') == 'production' or '--auto' in sys.argv:
            print("üîÑ Continuando automaticamente...")
            return True
            
        try:
            response = input("Deseja continuar mesmo assim? (s/N): ").lower()
            if response not in ['s', 'sim', 'y', 'yes']:
                print("üëã Configura√ß√£o cancelada. Use: source venv/bin/activate")
                return False
        except (EOFError, KeyboardInterrupt):
            print("\nüëã Configura√ß√£o cancelada.")
            return False
    else:
        print("‚úÖ Ambiente virtual ativo")
    
    return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    required_packages = [
        'flask',
        'flask_sqlalchemy',
        'werkzeug'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package} encontrado")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package} n√£o encontrado")
    
    if missing_packages:
        print("\nüîß Depend√™ncias faltando!")
        print("Execute: pip install -r requirements.txt")
        return False
    
    return True

def main():
    """Fun√ß√£o principal para inicializar a aplica√ß√£o"""
    print("üöÄ Iniciando TaskFlow...")
    print("=" * 50)
    
    # Verificar vers√£o do Python
    if not check_python_version():
        return
    
    # Verificar ambiente virtual
    if not check_virtual_env():
        return
    
    # Verificar depend√™ncias
    if not check_dependencies():
        return
    
    # Importar e executar aplica√ß√£o
    try:
        print("\nüîÑ Carregando aplica√ß√£o...")
        from main import create_app
        app = create_app()
        
        print("üåü TaskFlow iniciado com sucesso!")
        print("üìç Acesse: http://localhost:5000")
        print("üîß Modo Debug: Ativado")
        print("=" * 50)
        print("üí° Pressione Ctrl+C para parar a aplica√ß√£o")
        print()
        
        # Configura√ß√µes para evitar loops de reinicializa√ß√£o
        app.run(
            debug=True, 
            host='0.0.0.0', 
            port=5000, 
            use_reloader=False,  # Desabilita auto-reload para estabilidade
            threaded=True
        )
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        print("üí° Verifique se todas as depend√™ncias est√£o instaladas")
        print("üí° Execute: pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
        print("üí° Verifique o log de erros acima para mais detalhes")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Aplica√ß√£o encerrada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        print("üí° Contate o suporte t√©cnico se o problema persistir") 